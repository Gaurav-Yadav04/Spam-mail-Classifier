# -*- coding: utf-8 -*-
"""spam mail.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HP_neMbzwQHJhrpxq21L0RalQodM0RO_

Importing Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and pre processing"""

# loading data from csv file to pandas DataFrame
raw_mail_data = pd.read_csv('/content/spam_ham_dataset.csv')

print(raw_mail_data)

#replace the null values with a null values
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

mail_data.head()

mail_data.shape

"""Level Encoding

"""

#lebel spam mail as 0; ham mail as 1;
mail_data.loc[mail_data['label'] == 'spam' , 'label',] = 0
mail_data.loc[mail_data['label'] == 'ham' , 'label',] = 1

# separating the data as text and label
X = mail_data['text']
Y = mail_data['label']

print(X)
print(Y)

# spilting data into training data and test data
X_train , X_test , Y_train ,Y_test = train_test_split(X,Y, test_size=0.2, random_state=3)

print(X_train.shape)

# Feature Extraction
# Transfeom the text data to feature vectors thet can be used as input to the logistic regresstion
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

#convert Y_train and Y_test values as integers
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

"""Training Logistic Regression model"""

model = LogisticRegression();

#training the logistic regression model with the training data
model.fit(X_train_features, Y_train)

"""Evaluating the trained model"""

# prediction on training data
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print('Accuracy on training data : ', accuracy_on_training_data)

#predicting on test data
prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)

print('Accuracy on test data : ', accuracy_on_test_data)

"""Building a predictive System"""

input_mail = ["URGENT! You have won a 1 week FREE membership in our Â£100,000 Prize Jackpot! Txt the word: CLAIM to No: 81010 T&C www.dbuk.net LCCLTD POBOX 4403LDNW1A7RW18"]

  # convert text to feature vectors
  input_data_feature = feature_extraction.transform(input_mail)

  #making prediction
  prediction = model.predict(input_data_feature)
  print(prediction)

  if (prediction[0]==1):
    print('Ham mail')
  else:
    print('Spam mail')

import pickle

# save the trained model
filename = "spam_mail_model.pkl"
pickle.dump(model, open(filename, "wb"))

# save the feature extractor (TF-IDF)
vectorizer_filename = "vectorizer.pkl"
pickle.dump(feature_extraction, open(vectorizer_filename, "wb"))

from google.colab import files
files.download("spam_mail_model.pkl")
files.download("vectorizer.pkl")